name: CI/CD Pipeline

on:
  push:
    branches: [master, staging, develop]
  pull_request:
    branches: [master, staging]

env:
  NODE_VERSION: '18.x'
  DATABASE_URL: postgresql://test:test@localhost:5432/test_wealthlog

jobs:
  # ================================================================================
  # TESTING JOB
  # ================================================================================
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_wealthlog
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: 📦 Install dependencies
        run: |
          cd wealthlogs-code
          npm ci --legacy-peer-deps

      - name: 🏗️ Build shared package
        run: |
          cd wealthlogs-code/packages/shared
          npm run build

      - name: 🗄️ Setup database
        run: |
          cd wealthlogs-code/apps/backend
          npx prisma generate
          npx prisma migrate deploy

      - name: 🧪 Run backend tests
        run: |
          cd wealthlogs-code/apps/backend
          npm test -- --coverage

      - name: 🧪 Run frontend tests
        run: |
          cd wealthlogs-code/apps/web
          npm test -- --coverage

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./wealthlogs-code/apps/backend/coverage/lcov.info,./wealthlogs-code/apps/web/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # ================================================================================
  # LINTING JOB
  # ================================================================================
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: 📦 Install dependencies
        run: |
          cd wealthlogs-code
          npm ci --legacy-peer-deps

      - name: 🔍 Run ESLint
        run: |
          cd wealthlogs-code
          npm run lint --workspaces --if-present

      - name: 🎨 Check Prettier formatting
        run: |
          cd wealthlogs-code
          npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}"

      - name: 📝 TypeScript type checking
        run: |
          cd wealthlogs-code/apps/web
          npx tsc --noEmit
          cd ../backend
          npx tsc --noEmit

  # ================================================================================
  # BUILD JOB
  # ================================================================================
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: 📦 Install dependencies
        run: |
          cd wealthlogs-code
          npm ci --legacy-peer-deps

      - name: 🏗️ Build shared package
        run: |
          cd wealthlogs-code/packages/shared
          npm run build

      - name: 🏗️ Build backend
        run: |
          cd wealthlogs-code/apps/backend
          npm run build

      - name: 🏗️ Build frontend
        run: |
          cd wealthlogs-code/apps/web
          npm run build

      - name: 📱 Build mobile app
        run: |
          cd wealthlogs-code/apps/mobile
          npm run build
          npx cap sync

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            wealthlogs-code/apps/web/.next
            wealthlogs-code/apps/backend/dist
            wealthlogs-code/packages/shared/dist

  # ================================================================================
  # SECURITY SCAN
  # ================================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔒 Run npm audit
        run: |
          cd wealthlogs-code
          npm audit --audit-level=moderate || true

      - name: 🔍 Run security scan with Snyk
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # ================================================================================
  # DEPLOY TO STAGING
  # ================================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/staging'
    environment:
      name: staging
      url: https://staging.wealthlogs.com
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🚀 Deploy backend to Render (Staging)
        run: |
          echo "Backend deployment triggered via GitHub integration"
          # Render auto-deploys on push to staging branch

      - name: 🚀 Deploy frontend to Vercel (Staging)
        run: |
          echo "Frontend deployment triggered via GitHub integration"
          # Vercel auto-deploys on push to staging branch

      - name: ✅ Verify staging deployment
        run: |
          sleep 30
          curl -f https://staging-api.wealthlogs.com/health || exit 1
          curl -f https://staging.wealthlogs.com || exit 1

  # ================================================================================
  # DEPLOY TO PRODUCTION
  # ================================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/master'
    environment:
      name: production
      url: https://wealthlogs.com
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🚀 Deploy backend to Render (Production)
        run: |
          echo "Backend deployment triggered via GitHub integration"
          # Render auto-deploys on push to master branch

      - name: 🚀 Deploy frontend to Vercel (Production)
        run: |
          echo "Frontend deployment triggered via GitHub integration"
          # Vercel auto-deploys on push to master branch

      - name: ✅ Verify production deployment
        run: |
          sleep 30
          curl -f https://wealthlog-backend-hx43.onrender.com/health || exit 1
          curl -f https://wealthlogs.com || exit 1

      - name: 📊 Report deployment status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? '✅' : '❌';
            const message = `${status} Production deployment ${{ job.status }}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });

  # ================================================================================
  # PERFORMANCE TEST
  # ================================================================================
  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/staging'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🏃 Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            https://staging.wealthlogs.com
            https://staging.wealthlogs.com/dashboard
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: 📊 Performance results
        run: |
          echo "Performance test completed. Check artifacts for detailed results."
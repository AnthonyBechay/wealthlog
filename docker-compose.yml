version: '3.8'

services:
  # ================================================================================
  # PostgreSQL Database
  # ================================================================================
  postgres:
    image: postgres:15-alpine
    container_name: wealthlog-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USERNAME:-wealthlog_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-dev_password123}
      POSTGRES_DB: ${DB_NAME:-wealthlog}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-wealthlog_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - wealthlog-network

  # ================================================================================
  # Redis Cache (Optional)
  # ================================================================================
  redis:
    image: redis:7-alpine
    container_name: wealthlog-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_dev_password}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - wealthlog-network

  # ================================================================================
  # Backend API
  # ================================================================================
  backend:
    build:
      context: ./wealthlogs-code/apps/backend
      dockerfile: ../../../deployment/docker/Dockerfile.backend
    container_name: wealthlog-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${DEV_BACKEND_PORT:-5000}
      DATABASE_URL: postgresql://${DB_USERNAME:-wealthlog_user}:${DB_PASSWORD:-dev_password123}@postgres:5432/${DB_NAME:-wealthlog}?schema=public
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_dev_password}@redis:6379
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      FRONTEND_URL: http://frontend:3000
      CORS_ORIGIN: http://localhost:3000
    ports:
      - "${DEV_BACKEND_PORT:-5000}:5000"
    volumes:
      - ./wealthlogs-code/apps/backend:/app
      - /app/node_modules
      - backend_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - wealthlog-network

  # ================================================================================
  # Frontend Application
  # ================================================================================
  frontend:
    build:
      context: ./wealthlogs-code/apps/web
      dockerfile: ../../../deployment/docker/Dockerfile.frontend
      args:
        NEXT_PUBLIC_API_URL: http://localhost:${DEV_BACKEND_PORT:-5000}
    container_name: wealthlog-frontend
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${DEV_FRONTEND_PORT:-3000}
      NEXT_PUBLIC_API_URL: http://localhost:${DEV_BACKEND_PORT:-5000}
      NEXT_PUBLIC_GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
    ports:
      - "${DEV_FRONTEND_PORT:-3000}:3000"
    volumes:
      - ./wealthlogs-code/apps/web:/app
      - /app/node_modules
      - /app/.next
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - wealthlog-network

  # ================================================================================
  # Nginx Reverse Proxy (Optional - for production-like setup)
  # ================================================================================
  nginx:
    image: nginx:alpine
    container_name: wealthlog-nginx
    restart: unless-stopped
    depends_on:
      - backend
      - frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/nginx/sites:/etc/nginx/sites-enabled:ro
      - ./deployment/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - wealthlog-network
    profiles:
      - production

  # ================================================================================
  # Adminer - Database Management UI (Development only)
  # ================================================================================
  adminer:
    image: adminer:latest
    container_name: wealthlog-adminer
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    networks:
      - wealthlog-network
    profiles:
      - development

# ================================================================================
# Volumes
# ================================================================================
volumes:
  postgres_data:
    name: wealthlog_postgres_data
  redis_data:
    name: wealthlog_redis_data
  backend_logs:
    name: wealthlog_backend_logs
  nginx_logs:
    name: wealthlog_nginx_logs

# ================================================================================
# Networks
# ================================================================================
networks:
  wealthlog-network:
    name: wealthlog_network
    driver: bridge

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// =====================================================================
///                          Enums
/// =====================================================================
enum FinancialAccountType {
  FX_COMMODITY
  STOCKS
  CRYPTO
  REAL_ESTATE
  PERSONAL_EXPENSES
  BONDS
  ETFs
  CASH
  PHYSICAL_COMMODITY
  BUSINESS
  VEHICLE
  OTHER
}

enum TradeType {
  FX
  STOCK
  BOND
  CRYPTO
  ETF
  OTHER
}

enum TradeDirection {
  LONG
  SHORT
}

enum TradeStatus {
  OPEN
  CLOSED
  CANCELLED
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
  TRANSFER
  DIVIDEND
  TRADE_PNL
}

enum CommunityRole {
  MEMBER
  COMMUNITY_COACH
  COMMUNITY_MANAGER
}

enum AccessLevel {
  READ
  READ_WRITE
}

enum ProjectionType {
  INCOME
  EXPENSE
}

enum LoanType {
  BORROWED
  LENT
}

enum RecurringEntryType {
  INCOME
  EXPENSE
}

/// =====================================================================
///                          Models
/// =====================================================================
model User {
  id               Int       @id @default(autoincrement())
  username         String    @unique
  email            String    @unique 
  password         String
  firstName        String
  lastName         String
  phone            String?
  dateOfBirth      DateTime?
  securityQuestion String?
  securityAnswer   String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  //EMAIL VERIFICATION FIELDS (corrected names)
  emailVerified            Boolean   @default(false)
  emailVerificationToken   String?   @unique
  emailVerificationExpires DateTime?
  
  // PASSWORD RESET FIELDS (corrected names)
  passwordResetToken       String?   @unique
  passwordResetExpires     DateTime?
  
  // TRACKING FIELD (corrected name)
  lastLoginAt              DateTime?

  // Roles & Permissions
  roles         Role[]         @relation("UserRoles")
  settings      Settings?
  subscriptions Subscription[]

  // Financial
  accounts          FinancialAccount[]  // PAS statusHistory ici !
  loans             Loan[]
  expenses          Expense[]
  recurringEntries  RecurringEntry[]
  projectedEntries  ProjectedEntry[]
  expenseCategories ExpenseCategory[]
  counterparties    Counterparty[]

  // Social & Communities
  posts       Post[]                @relation("UserPosts")
  comments    Comment[]
  communities CommunityMembership[]

  // Coaching
  coachingAsCoach   Coaching[] @relation("CoachStudents")
  coachingAsStudent Coaching[] @relation("StudentCoach")

  // Delegated Access
  delegatedAccessGiven    DelegatedAccess[] @relation("ClientDelegated")
  delegatedAccessReceived DelegatedAccess[] @relation("DelegatedUserAccess")

  // Additional assets
  businessOwnerships BusinessOwnership[]
  collectibles       Collectible[]

  // Opposite relations for Tag.user, Label.user, CommunityNews.postedBy
  tags       Tag[]
  labels     Label[]
  postedNews CommunityNews[]
}

model Role {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  users       User[]  @relation("UserRoles")
}

model BrokerInstitution {
  id        Int      @id @default(autoincrement())
  name      String
  details   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  accounts FinancialAccount[]
}

model Tag {
  id       Int                @id @default(autoincrement())
  name     String
  color    String?
  userId   Int
  user     User               @relation(fields: [userId], references: [id])
  accounts FinancialAccount[] @relation("AccountTags")
}

model Label {
  id        Int      @id @default(autoincrement())
  name      String
  color     String?
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Many-to-many usage
  tradeLabels                TradeLabel[]
  expenseLabels              ExpenseLabel[]
  realEstateInvestmentLabels RealEstateInvestmentLabel[]
  TradeMedia                 TradeMedia[]
}

model ExpenseCategory {
  id            Int                  @id @default(autoincrement())
  name          String
  userId        Int?
  user          User?                @relation(fields: [userId], references: [id])
  subcategories ExpenseSubcategory[]
  expenses      Expense[]
}

model ExpenseSubcategory {
  id         Int             @id @default(autoincrement())
  name       String
  category   ExpenseCategory @relation(fields: [categoryId], references: [id])
  categoryId Int
  expenses   Expense[]
}

model Counterparty {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  userId      Int
  user        User    @relation(fields: [userId], references: [id])
  loans       Loan[]
}

model FinancialAccount {
  id          Int                  @id @default(autoincrement())
  userId      Int
  user        User                 @relation(fields: [userId], references: [id])
  name        String
  accountType FinancialAccountType
  balance     Float                @default(0)
  currency    String               @default("USD")
  isLiquid    Boolean              @default(false)
  identifier  String?
  active      Boolean              @default(true)  // ✅ Déjà présent
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @default(now())

  brokerInstitutionId Int?
  brokerInstitution   BrokerInstitution? @relation(fields: [brokerInstitutionId], references: [id])
  initialBalance      Float              @default(0)
  lastRecalculatedAt  DateTime?

  // Transaction relations
  transactionsFrom Transaction[] @relation("TransactionFrom")
  transactionsTo   Transaction[] @relation("TransactionTo")

  // Link to trades
  trades             Trade[]
  // For coaching
  coachings          Coaching[]
  // For delegated access
  delegatedAccesses  DelegatedAccess[]
  // For expense withdrawals
  expensesWithdrawal Expense[]         @relation("ExpenseWithdrawal")

  realEstateInvestments RealEstateInvestment[]
  tags                  Tag[]                  @relation("AccountTags")
  balanceHistory        BalanceHistory[]
  statusHistory         StatusHistory[]      
}


model Trade {
  id             Int                  @id @default(autoincrement())
  accountId      Int
  account        FinancialAccount     @relation(fields: [accountId], references: [id])
  instrumentId   Int?
  instrument     FinancialInstrument? @relation(fields: [instrumentId], references: [id])
  patternId      Int?
  pattern        TradingPattern?      @relation(fields: [patternId], references: [id])
  tradeType      TradeType
  tradeDirection TradeDirection?      @default(LONG)
  status         TradeStatus          @default(CLOSED)
  fees           Float                @default(0)
  entryDate      DateTime?            @default(now())
  exitDate       DateTime?
  amount         Float?
  notes          String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @default(now())
  realizedPL     Float?               @default(0)
  openingBalance Float?
  closingBalance Float?
  fxTrade        FxTrade?
  stocksTrade    StocksTrade?
  bondTrade      BondTrade?
  tradeLabels    TradeLabel[]
  media          TradeMedia[]

  @@index([entryDate])
}

/// Specialized trades
model FxTrade {
  id      Int   @id @default(autoincrement())
  tradeId Int   @unique
  trade   Trade @relation(fields: [tradeId], references: [id])

  entryPrice     Float?
  exitPrice      Float?
  lots           Float?
  stopLossPips   Float?
  pipsGain       Float?
  amountGain     Float?
  percentageGain Float?
  source         String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

model StocksTrade {
  id               Int               @id @default(autoincrement())
  tradeId          Int               @unique
  trade            Trade             @relation(fields: [tradeId], references: [id])
  entryPrice       Float
  exitPrice        Float?
  quantity         Float
  dividendPayments DividendPayment[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now())
}

model DividendPayment {
  id            Int         @id @default(autoincrement())
  stocksTradeId Int
  stocksTrade   StocksTrade @relation(fields: [stocksTradeId], references: [id])
  amount        Float
  paymentDate   DateTime    @default(now())
  createdAt     DateTime    @default(now())

  @@index([paymentDate])
}

model BondTrade {
  id           Int       @id @default(autoincrement())
  tradeId      Int       @unique
  trade        Trade     @relation(fields: [tradeId], references: [id])
  entryPrice   Float
  exitPrice    Float?
  quantity     Float
  couponRate   Float?
  maturityDate DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
}

model Transaction {
  id Int @id @default(autoincrement())

  fromAccountId Int?
  fromAccount   FinancialAccount? @relation("TransactionFrom", fields: [fromAccountId], references: [id])

  toAccountId   Int?
  toAccount     FinancialAccount? @relation("TransactionTo", fields: [toAccountId], references: [id])
  balanceImpact Float?
  type          TransactionType
  amount        Float
  dateTime      DateTime          @default(now())
  currency      String            @default("USD")
  description   String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @default(now())

  @@index([fromAccountId])
  @@index([toAccountId])
  @@index([dateTime])
}

model BalanceHistory {
  accountId Int
  account   FinancialAccount @relation(fields: [accountId], references: [id])
  date      DateTime         @default(now())
  balance   Float
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now())

  @@id([accountId, date])
  @@index([accountId, date], name: "idx_balanceHistory_account_date")
}

model RealEstateInvestment {
  id               Int              @id @default(autoincrement())
  accountId        Int
  account          FinancialAccount @relation(fields: [accountId], references: [id])
  propertyAddress  String
  propertyType     String
  usage            String
  category         String
  purchaseDate     DateTime
  purchasePrice    Float
  currentValuation Float            @default(0)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now())

  valuations       RealEstateValuation[]
  mortgage         Mortgage?
  realEstateLabels RealEstateInvestmentLabel[]

  expenses         Expense[]
  projectedEntries ProjectedEntry[]
  loans            Loan[]
}

model RealEstateValuation {
  id                     Int                  @id @default(autoincrement())
  realEstateInvestmentId Int
  realEstateInvestment   RealEstateInvestment @relation(fields: [realEstateInvestmentId], references: [id])
  valuationDate          DateTime             @default(now())
  valuationAmount        Float
}

model Mortgage {
  id                     Int                  @id @default(autoincrement())
  realEstateInvestmentId Int                  @unique
  realEstateInvestment   RealEstateInvestment @relation(fields: [realEstateInvestmentId], references: [id])

  mortgageAmount Float
  interestRate   Float
  termInYears    Int
  startDate      DateTime
  monthlyPayment Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  recurringEntries RecurringEntry[]
}

model RecurringEntry {
  id          Int                @id @default(autoincrement())
  userId      Int
  user        User               @relation(fields: [userId], references: [id])
  type        RecurringEntryType
  amount      Float
  category    String?
  description String?
  recurrence  String
  startDate   DateTime
  endDate     DateTime?

  mortgageId Int?
  mortgage   Mortgage? @relation(fields: [mortgageId], references: [id])

  expenses  Expense[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model Settings {
  id                                Int     @id @default(autoincrement())
  userId                            Int     @unique
  user                              User    @relation(fields: [userId], references: [id])
  beMin                             Float   @default(-0.2)
  beMax                             Float   @default(0.3)
  preferredCurrency                 String? @default("USD")
  language                          String? @default("en")
  timezone                          String? @default("UTC")
  displayMode                       String?
  notificationPreferences           Json?
  defaultExpenseWithdrawalAccountId Int?
  mediaTags                         Json?
}

model FinancialInstrument {
  id     Int     @id @default(autoincrement())
  userId Int
  name   String
  Trade  Trade[]

  @@unique([userId, name])
}

model TradingPattern {
  id     Int     @id @default(autoincrement())
  userId Int
  name   String
  Trade  Trade[]

  @@unique([userId, name])
}

model Subscription {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  planName  String
  features  Json?
  startDate DateTime  @default(now())
  endDate   DateTime?
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model Community {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  type        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  memberships       CommunityMembership[]
  posts             Post[]
  news              CommunityNews[]
  delegatedAccesses DelegatedAccess[]
}

model CommunityMembership {
  id          Int           @id @default(autoincrement())
  communityId Int
  community   Community     @relation(fields: [communityId], references: [id])
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  role        CommunityRole @default(MEMBER)
  rank        String?
  joinedAt    DateTime      @default(now())

  @@unique([communityId, userId])
}

model CommunityNews {
  id             Int       @id @default(autoincrement())
  communityId    Int
  community      Community @relation(fields: [communityId], references: [id])
  title          String
  content        String
  postedByUserId Int?
  postedBy       User?     @relation(fields: [postedByUserId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Post {
  id          Int       @id @default(autoincrement())
  communityId Int
  community   Community @relation(fields: [communityId], references: [id])
  authorId    Int
  author      User      @relation("UserPosts", fields: [authorId], references: [id])
  title       String
  content     String
  media       Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())

  comments Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  content   String
  createdAt DateTime @default(now())
}

model Coaching {
  id        Int                   @id @default(autoincrement())
  coachId   Int
  coach     User                  @relation("CoachStudents", fields: [coachId], references: [id])
  studentId Int
  student   User                  @relation("StudentCoach", fields: [studentId], references: [id])
  accountId Int?
  account   FinancialAccount?     @relation(fields: [accountId], references: [id])
  module    FinancialAccountType?
  createdAt DateTime              @default(now())

  @@unique([coachId, studentId, accountId, module])
}

model DelegatedAccess {
  id       Int  @id @default(autoincrement())
  clientId Int
  client   User @relation("ClientDelegated", fields: [clientId], references: [id])

  delegatedUserId Int?
  delegatedUser   User? @relation("DelegatedUserAccess", fields: [delegatedUserId], references: [id])

  communityId Int?
  community   Community? @relation(fields: [communityId], references: [id])

  accountId Int?
  account   FinancialAccount? @relation(fields: [accountId], references: [id])

  module      FinancialAccountType?
  accessLevel AccessLevel           @default(READ)
  createdAt   DateTime              @default(now())
  expiration  DateTime?

  @@unique([clientId, delegatedUserId, communityId, accountId, module])
}

model Expense {
  id                     Int                   @id @default(autoincrement())
  userId                 Int
  user                   User                  @relation(fields: [userId], references: [id])
  amount                 Float
  expenseCategoryId      Int
  expenseCategory        ExpenseCategory       @relation(fields: [expenseCategoryId], references: [id])
  expenseSubcategoryId   Int?
  expenseSubcategory     ExpenseSubcategory?   @relation(fields: [expenseSubcategoryId], references: [id])
  description            String?
  date                   DateTime              @default(now())
  recurringEntryId       Int?
  recurringEntry         RecurringEntry?       @relation(fields: [recurringEntryId], references: [id])
  withdrawalAccountId    Int?
  withdrawalAccount      FinancialAccount?     @relation("ExpenseWithdrawal", fields: [withdrawalAccountId], references: [id])
  realEstateInvestmentId Int?
  realEstateInvestment   RealEstateInvestment? @relation(fields: [realEstateInvestmentId], references: [id])
  expenseLabels          ExpenseLabel[]

  @@index([date])
}

model ProjectedEntry {
  id            Int            @id @default(autoincrement())
  userId        Int
  user          User           @relation(fields: [userId], references: [id])
  type          ProjectionType
  description   String
  amount        Float
  projectedDate DateTime
  createdAt     DateTime       @default(now())

  realEstateInvestmentId Int?
  realEstateInvestment   RealEstateInvestment? @relation(fields: [realEstateInvestmentId], references: [id])

  @@index([projectedDate])
}

model Loan {
  id              Int       @id @default(autoincrement())
  userId          Int
  user            User      @relation(fields: [userId], references: [id])
  loanType        LoanType
  amount          Float
  interestRate    Float?
  startDate       DateTime  @default(now())
  dueDate         DateTime?
  isPaymentActive Boolean   @default(true)

  counterpartyId Int
  counterparty   Counterparty @relation(fields: [counterpartyId], references: [id])
  description    String?

  realEstateInvestmentId Int?
  realEstateInvestment   RealEstateInvestment? @relation(fields: [realEstateInvestmentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  repayments LoanRepayment[]
}

model LoanRepayment {
  id            Int      @id @default(autoincrement())
  loanId        Int
  loan          Loan     @relation(fields: [loanId], references: [id])
  paymentDate   DateTime @default(now())
  principalPaid Float
  interestPaid  Float
  totalPaid     Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model TradeLabel {
  tradeId Int
  labelId Int
  trade   Trade @relation(fields: [tradeId], references: [id])
  label   Label @relation(fields: [labelId], references: [id])

  @@id([tradeId, labelId])
}

model ExpenseLabel {
  expenseId Int
  labelId   Int
  expense   Expense @relation(fields: [expenseId], references: [id])
  label     Label   @relation(fields: [labelId], references: [id])

  @@id([expenseId, labelId])
}

model RealEstateInvestmentLabel {
  realEstateInvestmentId Int
  labelId                Int
  realEstateInvestment   RealEstateInvestment @relation(fields: [realEstateInvestmentId], references: [id])
  label                  Label                @relation(fields: [labelId], references: [id])

  @@id([realEstateInvestmentId, labelId])
}

model ExchangeRate {
  id            Int      @id @default(autoincrement())
  baseCurrency  String
  quoteCurrency String
  rate          Float
  date          DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  @@index([baseCurrency, quoteCurrency, date], name: "idx_exchangeRate_base_quote_date")
}

model BusinessOwnership {
  id               Int      @id @default(autoincrement())
  userId           Int
  user             User     @relation(fields: [userId], references: [id])
  businessName     String
  sharePercentage  Float    @default(0)
  currentValuation Float    @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())

  valuations BusinessValuation[]
}

model BusinessValuation {
  id                  Int               @id @default(autoincrement())
  businessOwnershipId Int
  businessOwnership   BusinessOwnership @relation(fields: [businessOwnershipId], references: [id])
  valuationDate       DateTime          @default(now())
  valuationAmount     Float
}

model Collectible {
  id            Int       @id @default(autoincrement())
  userId        Int
  user          User      @relation(fields: [userId], references: [id])
  name          String
  category      String?
  purchaseDate  DateTime?
  purchasePrice Float?
  currentValue  Float?    @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())

  valuations CollectibleValuation[]
}

model CollectibleValuation {
  id              Int         @id @default(autoincrement())
  collectibleId   Int
  collectible     Collectible @relation(fields: [collectibleId], references: [id])
  valuationDate   DateTime    @default(now())
  valuationAmount Float
}

model TradeMedia {
  id          Int      @id @default(autoincrement())
  tradeId     Int
  trade       Trade    @relation(fields: [tradeId], references: [id])
  labelId     Int?
  label       Label?   @relation(fields: [labelId], references: [id])
  imageUrl    String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model StatusHistory {
  id             Int      @id @default(autoincrement())
  accountId      Int
  previousStatus Boolean
  newStatus      Boolean
  reason         String?
  comment        String?
  changedAt      DateTime @default(now())
  changedBy      String?

  // Relation
  account FinancialAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("status_history")
}




// =============================================
//              SYSTEM CONSTANTS TABLES  
// =============================================

model SystemTimezone {
  id          Int      @id @default(autoincrement())
  value       String   @unique // Ex: "America/New_York"
  label       String   // Ex: "New York"
  offset      String   // Ex: "-05:00"
  region      String?  // Ex: "America"
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive, sortOrder])
}

model SystemCurrency {
  id          Int      @id @default(autoincrement())
  code        String   @unique // Ex: "USD"
  name        String   // Ex: "US Dollar"
  symbol      String   // Ex: "$"
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive, sortOrder])
}

model SystemLanguage {
  id          Int      @id @default(autoincrement())
  value       String   @unique // Ex: "en"
  label       String   // Ex: "English"
  nativeName  String   // Ex: "English"
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive, sortOrder])
}